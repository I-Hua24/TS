package com.cc.ts


import android.os.Build
import androidx.annotation.RequiresApi
import androidx.compose.runtime.Composable
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.cc.ts.ui.theme.TSTheme
import com.cc.ts.database.*
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import kotlinx.coroutines.launch
import androidx.compose.ui.platform.LocalContext
import java.time.Duration
import java.time.LocalDate
import androidx.room.Room
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers


@Composable
fun Greeting(name: String, modifier: Modifier = Modifier) {
    Text(
        text = "Hello $name!",
        modifier = modifier
    )
}

@Preview(showBackground = true)
@Composable
fun GreetingPreview() {
    TSTheme {
        Greeting("Android")
    }
}


@Composable
fun CheckBox(task: Task, taskDao: TaskDao, onDelete: (Task) -> Unit) {
    Button(
        onClick = {
            deleteTask(task, taskDao)  // Delete from the database
            onDelete(task)  // Remove task from the list
        }
    ) {
        Text("Done!")
    }
}
private fun deleteTask(task: Task, taskDao: TaskDao) {
    CoroutineScope(Dispatchers.IO).launch {
        taskDao.delete(task)  // Perform DB operation in the background
    }
}



@Composable
fun TaskRow(task: Task, modifier: Modifier = Modifier, taskDao: TaskDao,tasks: MutableList<Task>) {
    Row(
        modifier = modifier
            .fillMaxWidth()
            .padding(16.dp)
    ) {
        // Task Text
        Column(
            modifier = Modifier
                .weight(1f)
                .padding(8.dp)
        ) {
            Text(text = if (task.text.isEmpty()) "empty" else task.text) // Correctly referencing task text
            Text(text = "Priority: ${task.priority}")
        }

        // Example Button
        Column(
            modifier = Modifier
                .weight(1f)
                .padding(8.dp)
        ) {
            // Call CheckBox with the task and taskDao to delete the task
            CheckBox(task = task, taskDao = taskDao, onDelete = { taskToDelete ->
                tasks.remove(taskToDelete)
            })
        }
    }
}

@RequiresApi(Build.VERSION_CODES.O)
@Composable
fun InputRow(taskDao: TaskDao, tasks: MutableList<Task>) {
    var inputText by remember { mutableStateOf("") }
    val scope = rememberCoroutineScope()

    Row(modifier = Modifier.padding(16.dp)) {
        TextField(
            value = inputText,
            onValueChange = { inputText = it },
            placeholder = { Text("Enter task text") },
            modifier = Modifier
                .weight(1f)
                .padding(end = 8.dp)
        )

        Button(
            onClick = {
                if (inputText.isNotBlank()) {
                    scope.launch {
                        val newTask = Task(
                            id = 0,  // Auto-generated by Room
                            priority = 1,
                            text = inputText.trim(),
                            description = "Task Description",
                            dueDate = LocalDate.now(),
                            estimatedDuration = Duration.ofMinutes(30),
                            category = "General",
                            completed = false
                        )
                        taskDao.insert(newTask)

                        // Update list dynamically
                        tasks.add(newTask)
                        inputText = ""  // Clear input after insertion
                    }
                }
            }
        ) {
            Text("+")
        }
    }
}


@RequiresApi(Build.VERSION_CODES.O)
@Preview(showBackground = true)
@Composable
fun InputRowPreview() {
    val context = LocalContext.current
    val taskDatabase = Room.inMemoryDatabaseBuilder(
        context,
        TaskDatabase::class.java
    ).build()

    val taskDao = taskDatabase.taskDao()

    // Use coroutine to insert a sample task and fetch all tasks
    val tasks = remember { mutableStateListOf<Task>() }
    LaunchedEffect(Unit) {
        val sampleTask = Task(
            id = 0,
            priority = 1,
            text = "Sample Task",
            description = "Preview Task Description",
            dueDate = LocalDate.now(),
            estimatedDuration = Duration.ofHours(1),
            category = "Preview",
            completed = false
        )
        taskDao.insert(sampleTask)
        tasks.addAll(taskDao.getAllTasks())
    }

    MyApp( taskDao = taskDao)
}
